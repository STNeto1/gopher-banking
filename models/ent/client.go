// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"models/ent/migrate"

	"models/ent/deposit"
	"models/ent/transference"
	"models/ent/user"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Deposit is the client for interacting with the Deposit builders.
	Deposit *DepositClient
	// Transference is the client for interacting with the Transference builders.
	Transference *TransferenceClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Deposit = NewDepositClient(c.config)
	c.Transference = NewTransferenceClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Deposit:      NewDepositClient(cfg),
		Transference: NewTransferenceClient(cfg),
		User:         NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Deposit:      NewDepositClient(cfg),
		Transference: NewTransferenceClient(cfg),
		User:         NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Deposit.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Deposit.Use(hooks...)
	c.Transference.Use(hooks...)
	c.User.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Deposit.Intercept(interceptors...)
	c.Transference.Intercept(interceptors...)
	c.User.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *DepositMutation:
		return c.Deposit.mutate(ctx, m)
	case *TransferenceMutation:
		return c.Transference.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// DepositClient is a client for the Deposit schema.
type DepositClient struct {
	config
}

// NewDepositClient returns a client for the Deposit from the given config.
func NewDepositClient(c config) *DepositClient {
	return &DepositClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `deposit.Hooks(f(g(h())))`.
func (c *DepositClient) Use(hooks ...Hook) {
	c.hooks.Deposit = append(c.hooks.Deposit, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `deposit.Intercept(f(g(h())))`.
func (c *DepositClient) Intercept(interceptors ...Interceptor) {
	c.inters.Deposit = append(c.inters.Deposit, interceptors...)
}

// Create returns a builder for creating a Deposit entity.
func (c *DepositClient) Create() *DepositCreate {
	mutation := newDepositMutation(c.config, OpCreate)
	return &DepositCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Deposit entities.
func (c *DepositClient) CreateBulk(builders ...*DepositCreate) *DepositCreateBulk {
	return &DepositCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Deposit.
func (c *DepositClient) Update() *DepositUpdate {
	mutation := newDepositMutation(c.config, OpUpdate)
	return &DepositUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DepositClient) UpdateOne(d *Deposit) *DepositUpdateOne {
	mutation := newDepositMutation(c.config, OpUpdateOne, withDeposit(d))
	return &DepositUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DepositClient) UpdateOneID(id uuid.UUID) *DepositUpdateOne {
	mutation := newDepositMutation(c.config, OpUpdateOne, withDepositID(id))
	return &DepositUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Deposit.
func (c *DepositClient) Delete() *DepositDelete {
	mutation := newDepositMutation(c.config, OpDelete)
	return &DepositDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DepositClient) DeleteOne(d *Deposit) *DepositDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DepositClient) DeleteOneID(id uuid.UUID) *DepositDeleteOne {
	builder := c.Delete().Where(deposit.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DepositDeleteOne{builder}
}

// Query returns a query builder for Deposit.
func (c *DepositClient) Query() *DepositQuery {
	return &DepositQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDeposit},
		inters: c.Interceptors(),
	}
}

// Get returns a Deposit entity by its id.
func (c *DepositClient) Get(ctx context.Context, id uuid.UUID) (*Deposit, error) {
	return c.Query().Where(deposit.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DepositClient) GetX(ctx context.Context, id uuid.UUID) *Deposit {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Deposit.
func (c *DepositClient) QueryUser(d *Deposit) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deposit.Table, deposit.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, deposit.UserTable, deposit.UserColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DepositClient) Hooks() []Hook {
	return c.hooks.Deposit
}

// Interceptors returns the client interceptors.
func (c *DepositClient) Interceptors() []Interceptor {
	return c.inters.Deposit
}

func (c *DepositClient) mutate(ctx context.Context, m *DepositMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DepositCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DepositUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DepositUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DepositDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Deposit mutation op: %q", m.Op())
	}
}

// TransferenceClient is a client for the Transference schema.
type TransferenceClient struct {
	config
}

// NewTransferenceClient returns a client for the Transference from the given config.
func NewTransferenceClient(c config) *TransferenceClient {
	return &TransferenceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `transference.Hooks(f(g(h())))`.
func (c *TransferenceClient) Use(hooks ...Hook) {
	c.hooks.Transference = append(c.hooks.Transference, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `transference.Intercept(f(g(h())))`.
func (c *TransferenceClient) Intercept(interceptors ...Interceptor) {
	c.inters.Transference = append(c.inters.Transference, interceptors...)
}

// Create returns a builder for creating a Transference entity.
func (c *TransferenceClient) Create() *TransferenceCreate {
	mutation := newTransferenceMutation(c.config, OpCreate)
	return &TransferenceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Transference entities.
func (c *TransferenceClient) CreateBulk(builders ...*TransferenceCreate) *TransferenceCreateBulk {
	return &TransferenceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Transference.
func (c *TransferenceClient) Update() *TransferenceUpdate {
	mutation := newTransferenceMutation(c.config, OpUpdate)
	return &TransferenceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TransferenceClient) UpdateOne(t *Transference) *TransferenceUpdateOne {
	mutation := newTransferenceMutation(c.config, OpUpdateOne, withTransference(t))
	return &TransferenceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TransferenceClient) UpdateOneID(id uuid.UUID) *TransferenceUpdateOne {
	mutation := newTransferenceMutation(c.config, OpUpdateOne, withTransferenceID(id))
	return &TransferenceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Transference.
func (c *TransferenceClient) Delete() *TransferenceDelete {
	mutation := newTransferenceMutation(c.config, OpDelete)
	return &TransferenceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TransferenceClient) DeleteOne(t *Transference) *TransferenceDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TransferenceClient) DeleteOneID(id uuid.UUID) *TransferenceDeleteOne {
	builder := c.Delete().Where(transference.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TransferenceDeleteOne{builder}
}

// Query returns a query builder for Transference.
func (c *TransferenceClient) Query() *TransferenceQuery {
	return &TransferenceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTransference},
		inters: c.Interceptors(),
	}
}

// Get returns a Transference entity by its id.
func (c *TransferenceClient) Get(ctx context.Context, id uuid.UUID) (*Transference, error) {
	return c.Query().Where(transference.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TransferenceClient) GetX(ctx context.Context, id uuid.UUID) *Transference {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFromUser queries the from_user edge of a Transference.
func (c *TransferenceClient) QueryFromUser(t *Transference) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(transference.Table, transference.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, transference.FromUserTable, transference.FromUserColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryToUser queries the to_user edge of a Transference.
func (c *TransferenceClient) QueryToUser(t *Transference) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(transference.Table, transference.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, transference.ToUserTable, transference.ToUserColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TransferenceClient) Hooks() []Hook {
	return c.hooks.Transference
}

// Interceptors returns the client interceptors.
func (c *TransferenceClient) Interceptors() []Interceptor {
	return c.inters.Transference
}

func (c *TransferenceClient) mutate(ctx context.Context, m *TransferenceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TransferenceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TransferenceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TransferenceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TransferenceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Transference mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDeposits queries the deposits edge of a User.
func (c *UserClient) QueryDeposits(u *User) *DepositQuery {
	query := (&DepositClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(deposit.Table, deposit.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.DepositsTable, user.DepositsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFromTransfers queries the from_transfers edge of a User.
func (c *UserClient) QueryFromTransfers(u *User) *TransferenceQuery {
	query := (&TransferenceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(transference.Table, transference.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.FromTransfersTable, user.FromTransfersColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryToTransfers queries the to_transfers edge of a User.
func (c *UserClient) QueryToTransfers(u *User) *TransferenceQuery {
	query := (&TransferenceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(transference.Table, transference.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ToTransfersTable, user.ToTransfersColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}
