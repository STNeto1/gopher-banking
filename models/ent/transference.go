// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"models/ent/transference"
	"models/ent/user"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Transference is the model entity for the Transference schema.
type Transference struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount float64 `json:"amount,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// Status holds the value of the "status" field.
	Status transference.Status `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TransferenceQuery when eager-loading is set.
	Edges               TransferenceEdges `json:"edges"`
	user_from_transfers *uuid.UUID
	user_to_transfers   *uuid.UUID
}

// TransferenceEdges holds the relations/edges for other nodes in the graph.
type TransferenceEdges struct {
	// FromUser holds the value of the from_user edge.
	FromUser *User `json:"from_user,omitempty"`
	// ToUser holds the value of the to_user edge.
	ToUser *User `json:"to_user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// FromUserOrErr returns the FromUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TransferenceEdges) FromUserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.FromUser == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.FromUser, nil
	}
	return nil, &NotLoadedError{edge: "from_user"}
}

// ToUserOrErr returns the ToUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TransferenceEdges) ToUserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.ToUser == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.ToUser, nil
	}
	return nil, &NotLoadedError{edge: "to_user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Transference) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case transference.FieldAmount:
			values[i] = new(sql.NullFloat64)
		case transference.FieldMessage, transference.FieldStatus:
			values[i] = new(sql.NullString)
		case transference.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case transference.FieldID:
			values[i] = new(uuid.UUID)
		case transference.ForeignKeys[0]: // user_from_transfers
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case transference.ForeignKeys[1]: // user_to_transfers
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Transference", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Transference fields.
func (t *Transference) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case transference.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				t.ID = *value
			}
		case transference.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				t.Amount = value.Float64
			}
		case transference.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				t.Message = value.String
			}
		case transference.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				t.Status = transference.Status(value.String)
			}
		case transference.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case transference.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_from_transfers", values[i])
			} else if value.Valid {
				t.user_from_transfers = new(uuid.UUID)
				*t.user_from_transfers = *value.S.(*uuid.UUID)
			}
		case transference.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_to_transfers", values[i])
			} else if value.Valid {
				t.user_to_transfers = new(uuid.UUID)
				*t.user_to_transfers = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryFromUser queries the "from_user" edge of the Transference entity.
func (t *Transference) QueryFromUser() *UserQuery {
	return NewTransferenceClient(t.config).QueryFromUser(t)
}

// QueryToUser queries the "to_user" edge of the Transference entity.
func (t *Transference) QueryToUser() *UserQuery {
	return NewTransferenceClient(t.config).QueryToUser(t)
}

// Update returns a builder for updating this Transference.
// Note that you need to call Transference.Unwrap() before calling this method if this Transference
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Transference) Update() *TransferenceUpdateOne {
	return NewTransferenceClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Transference entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Transference) Unwrap() *Transference {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Transference is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Transference) String() string {
	var builder strings.Builder
	builder.WriteString("Transference(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", t.Amount))
	builder.WriteString(", ")
	builder.WriteString("message=")
	builder.WriteString(t.Message)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", t.Status))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Transferences is a parsable slice of Transference.
type Transferences []*Transference
