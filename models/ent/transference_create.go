// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"models/ent/transference"
	"models/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TransferenceCreate is the builder for creating a Transference entity.
type TransferenceCreate struct {
	config
	mutation *TransferenceMutation
	hooks    []Hook
}

// SetAmount sets the "amount" field.
func (tc *TransferenceCreate) SetAmount(f float64) *TransferenceCreate {
	tc.mutation.SetAmount(f)
	return tc
}

// SetMessage sets the "message" field.
func (tc *TransferenceCreate) SetMessage(s string) *TransferenceCreate {
	tc.mutation.SetMessage(s)
	return tc
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (tc *TransferenceCreate) SetNillableMessage(s *string) *TransferenceCreate {
	if s != nil {
		tc.SetMessage(*s)
	}
	return tc
}

// SetStatus sets the "status" field.
func (tc *TransferenceCreate) SetStatus(t transference.Status) *TransferenceCreate {
	tc.mutation.SetStatus(t)
	return tc
}

// SetCreatedAt sets the "created_at" field.
func (tc *TransferenceCreate) SetCreatedAt(t time.Time) *TransferenceCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TransferenceCreate) SetNillableCreatedAt(t *time.Time) *TransferenceCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TransferenceCreate) SetID(u uuid.UUID) *TransferenceCreate {
	tc.mutation.SetID(u)
	return tc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tc *TransferenceCreate) SetNillableID(u *uuid.UUID) *TransferenceCreate {
	if u != nil {
		tc.SetID(*u)
	}
	return tc
}

// SetFromUserID sets the "from_user" edge to the User entity by ID.
func (tc *TransferenceCreate) SetFromUserID(id uuid.UUID) *TransferenceCreate {
	tc.mutation.SetFromUserID(id)
	return tc
}

// SetNillableFromUserID sets the "from_user" edge to the User entity by ID if the given value is not nil.
func (tc *TransferenceCreate) SetNillableFromUserID(id *uuid.UUID) *TransferenceCreate {
	if id != nil {
		tc = tc.SetFromUserID(*id)
	}
	return tc
}

// SetFromUser sets the "from_user" edge to the User entity.
func (tc *TransferenceCreate) SetFromUser(u *User) *TransferenceCreate {
	return tc.SetFromUserID(u.ID)
}

// SetToUserID sets the "to_user" edge to the User entity by ID.
func (tc *TransferenceCreate) SetToUserID(id uuid.UUID) *TransferenceCreate {
	tc.mutation.SetToUserID(id)
	return tc
}

// SetNillableToUserID sets the "to_user" edge to the User entity by ID if the given value is not nil.
func (tc *TransferenceCreate) SetNillableToUserID(id *uuid.UUID) *TransferenceCreate {
	if id != nil {
		tc = tc.SetToUserID(*id)
	}
	return tc
}

// SetToUser sets the "to_user" edge to the User entity.
func (tc *TransferenceCreate) SetToUser(u *User) *TransferenceCreate {
	return tc.SetToUserID(u.ID)
}

// Mutation returns the TransferenceMutation object of the builder.
func (tc *TransferenceCreate) Mutation() *TransferenceMutation {
	return tc.mutation
}

// Save creates the Transference in the database.
func (tc *TransferenceCreate) Save(ctx context.Context) (*Transference, error) {
	tc.defaults()
	return withHooks[*Transference, TransferenceMutation](ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TransferenceCreate) SaveX(ctx context.Context) *Transference {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TransferenceCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TransferenceCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TransferenceCreate) defaults() {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := transference.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.ID(); !ok {
		v := transference.DefaultID()
		tc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TransferenceCreate) check() error {
	if _, ok := tc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "Transference.amount"`)}
	}
	if _, ok := tc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Transference.status"`)}
	}
	if v, ok := tc.mutation.Status(); ok {
		if err := transference.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Transference.status": %w`, err)}
		}
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Transference.created_at"`)}
	}
	return nil
}

func (tc *TransferenceCreate) sqlSave(ctx context.Context) (*Transference, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TransferenceCreate) createSpec() (*Transference, *sqlgraph.CreateSpec) {
	var (
		_node = &Transference{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(transference.Table, sqlgraph.NewFieldSpec(transference.FieldID, field.TypeUUID))
	)
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tc.mutation.Amount(); ok {
		_spec.SetField(transference.FieldAmount, field.TypeFloat64, value)
		_node.Amount = value
	}
	if value, ok := tc.mutation.Message(); ok {
		_spec.SetField(transference.FieldMessage, field.TypeString, value)
		_node.Message = value
	}
	if value, ok := tc.mutation.Status(); ok {
		_spec.SetField(transference.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(transference.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := tc.mutation.FromUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transference.FromUserTable,
			Columns: []string{transference.FromUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_from_transfers = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.ToUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transference.ToUserTable,
			Columns: []string{transference.ToUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_to_transfers = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TransferenceCreateBulk is the builder for creating many Transference entities in bulk.
type TransferenceCreateBulk struct {
	config
	builders []*TransferenceCreate
}

// Save creates the Transference entities in the database.
func (tcb *TransferenceCreateBulk) Save(ctx context.Context) ([]*Transference, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Transference, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TransferenceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TransferenceCreateBulk) SaveX(ctx context.Context) []*Transference {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TransferenceCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TransferenceCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
