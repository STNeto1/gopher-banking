// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"models/ent/predicate"
	"models/ent/transference"
	"models/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TransferenceUpdate is the builder for updating Transference entities.
type TransferenceUpdate struct {
	config
	hooks    []Hook
	mutation *TransferenceMutation
}

// Where appends a list predicates to the TransferenceUpdate builder.
func (tu *TransferenceUpdate) Where(ps ...predicate.Transference) *TransferenceUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetAmount sets the "amount" field.
func (tu *TransferenceUpdate) SetAmount(f float64) *TransferenceUpdate {
	tu.mutation.ResetAmount()
	tu.mutation.SetAmount(f)
	return tu
}

// AddAmount adds f to the "amount" field.
func (tu *TransferenceUpdate) AddAmount(f float64) *TransferenceUpdate {
	tu.mutation.AddAmount(f)
	return tu
}

// SetStatus sets the "status" field.
func (tu *TransferenceUpdate) SetStatus(t transference.Status) *TransferenceUpdate {
	tu.mutation.SetStatus(t)
	return tu
}

// SetCreatedAt sets the "created_at" field.
func (tu *TransferenceUpdate) SetCreatedAt(t time.Time) *TransferenceUpdate {
	tu.mutation.SetCreatedAt(t)
	return tu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tu *TransferenceUpdate) SetNillableCreatedAt(t *time.Time) *TransferenceUpdate {
	if t != nil {
		tu.SetCreatedAt(*t)
	}
	return tu
}

// SetFromUserID sets the "from_user" edge to the User entity by ID.
func (tu *TransferenceUpdate) SetFromUserID(id uuid.UUID) *TransferenceUpdate {
	tu.mutation.SetFromUserID(id)
	return tu
}

// SetNillableFromUserID sets the "from_user" edge to the User entity by ID if the given value is not nil.
func (tu *TransferenceUpdate) SetNillableFromUserID(id *uuid.UUID) *TransferenceUpdate {
	if id != nil {
		tu = tu.SetFromUserID(*id)
	}
	return tu
}

// SetFromUser sets the "from_user" edge to the User entity.
func (tu *TransferenceUpdate) SetFromUser(u *User) *TransferenceUpdate {
	return tu.SetFromUserID(u.ID)
}

// SetToUserID sets the "to_user" edge to the User entity by ID.
func (tu *TransferenceUpdate) SetToUserID(id uuid.UUID) *TransferenceUpdate {
	tu.mutation.SetToUserID(id)
	return tu
}

// SetNillableToUserID sets the "to_user" edge to the User entity by ID if the given value is not nil.
func (tu *TransferenceUpdate) SetNillableToUserID(id *uuid.UUID) *TransferenceUpdate {
	if id != nil {
		tu = tu.SetToUserID(*id)
	}
	return tu
}

// SetToUser sets the "to_user" edge to the User entity.
func (tu *TransferenceUpdate) SetToUser(u *User) *TransferenceUpdate {
	return tu.SetToUserID(u.ID)
}

// Mutation returns the TransferenceMutation object of the builder.
func (tu *TransferenceUpdate) Mutation() *TransferenceMutation {
	return tu.mutation
}

// ClearFromUser clears the "from_user" edge to the User entity.
func (tu *TransferenceUpdate) ClearFromUser() *TransferenceUpdate {
	tu.mutation.ClearFromUser()
	return tu
}

// ClearToUser clears the "to_user" edge to the User entity.
func (tu *TransferenceUpdate) ClearToUser() *TransferenceUpdate {
	tu.mutation.ClearToUser()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TransferenceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, TransferenceMutation](ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TransferenceUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TransferenceUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TransferenceUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TransferenceUpdate) check() error {
	if v, ok := tu.mutation.Status(); ok {
		if err := transference.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Transference.status": %w`, err)}
		}
	}
	return nil
}

func (tu *TransferenceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(transference.Table, transference.Columns, sqlgraph.NewFieldSpec(transference.FieldID, field.TypeUUID))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Amount(); ok {
		_spec.SetField(transference.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.AddedAmount(); ok {
		_spec.AddField(transference.FieldAmount, field.TypeFloat64, value)
	}
	if tu.mutation.MessageCleared() {
		_spec.ClearField(transference.FieldMessage, field.TypeString)
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.SetField(transference.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.SetField(transference.FieldCreatedAt, field.TypeTime, value)
	}
	if tu.mutation.FromUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transference.FromUserTable,
			Columns: []string{transference.FromUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.FromUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transference.FromUserTable,
			Columns: []string{transference.FromUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ToUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transference.ToUserTable,
			Columns: []string{transference.ToUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ToUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transference.ToUserTable,
			Columns: []string{transference.ToUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transference.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TransferenceUpdateOne is the builder for updating a single Transference entity.
type TransferenceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TransferenceMutation
}

// SetAmount sets the "amount" field.
func (tuo *TransferenceUpdateOne) SetAmount(f float64) *TransferenceUpdateOne {
	tuo.mutation.ResetAmount()
	tuo.mutation.SetAmount(f)
	return tuo
}

// AddAmount adds f to the "amount" field.
func (tuo *TransferenceUpdateOne) AddAmount(f float64) *TransferenceUpdateOne {
	tuo.mutation.AddAmount(f)
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TransferenceUpdateOne) SetStatus(t transference.Status) *TransferenceUpdateOne {
	tuo.mutation.SetStatus(t)
	return tuo
}

// SetCreatedAt sets the "created_at" field.
func (tuo *TransferenceUpdateOne) SetCreatedAt(t time.Time) *TransferenceUpdateOne {
	tuo.mutation.SetCreatedAt(t)
	return tuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuo *TransferenceUpdateOne) SetNillableCreatedAt(t *time.Time) *TransferenceUpdateOne {
	if t != nil {
		tuo.SetCreatedAt(*t)
	}
	return tuo
}

// SetFromUserID sets the "from_user" edge to the User entity by ID.
func (tuo *TransferenceUpdateOne) SetFromUserID(id uuid.UUID) *TransferenceUpdateOne {
	tuo.mutation.SetFromUserID(id)
	return tuo
}

// SetNillableFromUserID sets the "from_user" edge to the User entity by ID if the given value is not nil.
func (tuo *TransferenceUpdateOne) SetNillableFromUserID(id *uuid.UUID) *TransferenceUpdateOne {
	if id != nil {
		tuo = tuo.SetFromUserID(*id)
	}
	return tuo
}

// SetFromUser sets the "from_user" edge to the User entity.
func (tuo *TransferenceUpdateOne) SetFromUser(u *User) *TransferenceUpdateOne {
	return tuo.SetFromUserID(u.ID)
}

// SetToUserID sets the "to_user" edge to the User entity by ID.
func (tuo *TransferenceUpdateOne) SetToUserID(id uuid.UUID) *TransferenceUpdateOne {
	tuo.mutation.SetToUserID(id)
	return tuo
}

// SetNillableToUserID sets the "to_user" edge to the User entity by ID if the given value is not nil.
func (tuo *TransferenceUpdateOne) SetNillableToUserID(id *uuid.UUID) *TransferenceUpdateOne {
	if id != nil {
		tuo = tuo.SetToUserID(*id)
	}
	return tuo
}

// SetToUser sets the "to_user" edge to the User entity.
func (tuo *TransferenceUpdateOne) SetToUser(u *User) *TransferenceUpdateOne {
	return tuo.SetToUserID(u.ID)
}

// Mutation returns the TransferenceMutation object of the builder.
func (tuo *TransferenceUpdateOne) Mutation() *TransferenceMutation {
	return tuo.mutation
}

// ClearFromUser clears the "from_user" edge to the User entity.
func (tuo *TransferenceUpdateOne) ClearFromUser() *TransferenceUpdateOne {
	tuo.mutation.ClearFromUser()
	return tuo
}

// ClearToUser clears the "to_user" edge to the User entity.
func (tuo *TransferenceUpdateOne) ClearToUser() *TransferenceUpdateOne {
	tuo.mutation.ClearToUser()
	return tuo
}

// Where appends a list predicates to the TransferenceUpdate builder.
func (tuo *TransferenceUpdateOne) Where(ps ...predicate.Transference) *TransferenceUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TransferenceUpdateOne) Select(field string, fields ...string) *TransferenceUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Transference entity.
func (tuo *TransferenceUpdateOne) Save(ctx context.Context) (*Transference, error) {
	return withHooks[*Transference, TransferenceMutation](ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TransferenceUpdateOne) SaveX(ctx context.Context) *Transference {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TransferenceUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TransferenceUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TransferenceUpdateOne) check() error {
	if v, ok := tuo.mutation.Status(); ok {
		if err := transference.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Transference.status": %w`, err)}
		}
	}
	return nil
}

func (tuo *TransferenceUpdateOne) sqlSave(ctx context.Context) (_node *Transference, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(transference.Table, transference.Columns, sqlgraph.NewFieldSpec(transference.FieldID, field.TypeUUID))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Transference.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, transference.FieldID)
		for _, f := range fields {
			if !transference.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != transference.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Amount(); ok {
		_spec.SetField(transference.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.AddedAmount(); ok {
		_spec.AddField(transference.FieldAmount, field.TypeFloat64, value)
	}
	if tuo.mutation.MessageCleared() {
		_spec.ClearField(transference.FieldMessage, field.TypeString)
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.SetField(transference.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.SetField(transference.FieldCreatedAt, field.TypeTime, value)
	}
	if tuo.mutation.FromUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transference.FromUserTable,
			Columns: []string{transference.FromUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.FromUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transference.FromUserTable,
			Columns: []string{transference.FromUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ToUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transference.ToUserTable,
			Columns: []string{transference.ToUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ToUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transference.ToUserTable,
			Columns: []string{transference.ToUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Transference{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transference.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
