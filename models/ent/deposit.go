// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"models/ent/deposit"
	"models/ent/user"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Deposit is the model entity for the Deposit schema.
type Deposit struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount float64 `json:"amount,omitempty"`
	// Status holds the value of the "status" field.
	Status deposit.Status `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DepositQuery when eager-loading is set.
	Edges         DepositEdges `json:"edges"`
	user_deposits *uuid.UUID
}

// DepositEdges holds the relations/edges for other nodes in the graph.
type DepositEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DepositEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Deposit) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case deposit.FieldAmount:
			values[i] = new(sql.NullFloat64)
		case deposit.FieldStatus:
			values[i] = new(sql.NullString)
		case deposit.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case deposit.FieldID:
			values[i] = new(uuid.UUID)
		case deposit.ForeignKeys[0]: // user_deposits
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Deposit", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Deposit fields.
func (d *Deposit) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case deposit.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				d.ID = *value
			}
		case deposit.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				d.Amount = value.Float64
			}
		case deposit.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				d.Status = deposit.Status(value.String)
			}
		case deposit.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				d.CreatedAt = value.Time
			}
		case deposit.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_deposits", values[i])
			} else if value.Valid {
				d.user_deposits = new(uuid.UUID)
				*d.user_deposits = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the Deposit entity.
func (d *Deposit) QueryUser() *UserQuery {
	return NewDepositClient(d.config).QueryUser(d)
}

// Update returns a builder for updating this Deposit.
// Note that you need to call Deposit.Unwrap() before calling this method if this Deposit
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Deposit) Update() *DepositUpdateOne {
	return NewDepositClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Deposit entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Deposit) Unwrap() *Deposit {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Deposit is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Deposit) String() string {
	var builder strings.Builder
	builder.WriteString("Deposit(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", d.Amount))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", d.Status))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(d.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Deposits is a parsable slice of Deposit.
type Deposits []*Deposit
